name: Build Windows

#on:
#  create:
#    tags:
#      - '*'
on:
  workflow_dispatch:

jobs:  
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create .npmrc file
        run: |
          echo "registry=https://registry.yarnpkg.com/" > .npmrc
          echo "@internxt:registry=https://npm.pkg.github.com" >> .npmrc
          # You cannot read packages from other private repos with GITHUB_TOKEN
          # You have to use a PAT instead https://github.com/actions/setup-node/issues/49
          echo //npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .npmrc
          echo "always-auth=true" >> .npmrc
      - name: Create .env file
        run: |
          touch .env
          echo "CRYPTO_KEY=${{ secrets.CRYPTO_KEY }}" >> .env
          echo "MAGIC_IV=${{ secrets.MAGIC_IV }}" >> .env
          echo "MAGIC_SALT=${{ secrets.MAGIC_SALT }}" >> .env
          echo "NEW_CRYPTO_KEY=${{ secrets.NEW_CRYPTO_KEY }}" >> .env
          echo "API_URL=https://desktop.internxt.com" >> .env
          echo "NEW_DRIVE_URL=https://api.internxt.com" >> .env
          echo "DRIVE_URL=https://drive.internxt.com" >> .env
          echo "BRIDGE_URL=https://api.internxt.com" >> .env
          echo "APP_SEGMENT_KEY=${{ secrets.APP_SEGMENT_KEY }}" >> .env
          echo "APP_SEGMENT_KEY_TEST=${{ secrets.APP_SEGMENT_KEY_TEST }}" >> .env
          echo "BUG_REPORTING_URL=https://desktop-bug-reporting.inxt.workers.dev" >> .env
          echo "NOTIFICATIONS_URL=https://notifications.internxt.com" >> .env
          echo "LOCK_REFRESH_INTERVAL=20000" >> .env
          echo "PHOTOS_URL=https://photos.internxt.com/api" >> .env
          echo "DRIVE_API_URL=https://drive.internxt.com/api" >> .env
          echo "RUDDERSTACK_KEY=${{ secrets.RUDDERSTACK_KEY }}" >> .env
          echo "RUDDERSTACK_DATA_PLANE_URL=${{ secrets.RUDDERSTACK_DATA_PLANE_URL }}" >> .env
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com'
      - name: Install Chocolatey
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      - name: Install GraphicsMagick
        run: |
          choco install graphicsmagick
      - name: Add GraphicsMagick path
        shell: pwsh
        run: |
          refreshenv
          $env:Path += ";C:\Program Files\GraphicsMagick-1.3.36-Q16"
      - name: Install node
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://nodejs.org/dist/v16.14.0/node-v16.14.0-x64.msi -OutFile nodejs.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/I nodejs.msi /quiet /norestart'
      - name: Install YubiKey
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://developers.yubico.com/yubikey-manager-qt/Releases/yubikey-manager-qt-1.2.5-win64.exe" -OutFile "yubikey-manager-qt-1.2.5-win64.exe"
          Start-Process .\yubikey-manager-qt-1.2.5-win64.exe -ArgumentList "/S /D=C:\Program Files\Yubico\YubiKey Manager" -Wait
      - name: Install yubico-piv-tool
        shell: pwsh
        run: |
          choco install yubico-piv-tool -y
          [Environment]::SetEnvironmentVariable("Path", "$env:Path;C:\Program Files\Yubico\Yubico PIV Tool\bin", "Machine")
      - name: Checks
        run: |
          dir "C:\Program Files\Yubico\Yubico PIV Tool\bin"
          echo "##[add-to-path]C:\Program Files\Yubico\Yubico PIV Tool\bin"
      - name: Import key
        shell: pwsh
        run: |
          $env:Path.Split(';')
          choco list -l yubico-piv-tool
          & "C:\Program Files\Yubico\Yubico PIV Tool\bin\yubico-piv-tool.exe" -s 9c -a import-certificate -i "$env:CERTIFICATE"
        env:
          CERTIFICATE: ${{ secrets.CERTIFICATE_WINDOWS }}
      - name: Install yarn and requirements
        run: |  
          corepack enable
          npm install --global yarn
          npm install yarn --save-dev
          yarn install --network-timeout 1000000
      - name: run postinstall
        run: |        
          yarn run postinstall
      - name: run package
        run: |        
          yarn run package
      - name: Check file 
        run: |
          ls release/build/
