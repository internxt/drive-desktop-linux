name: Build Mac

#on:
#  create:
#    tags:
#      - '*'
on:
  workflow_dispatch:

jobs:          
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create .npmrc file
        run: |
          echo "registry=https://registry.yarnpkg.com/" > .npmrc
          echo "@internxt:registry=https://npm.pkg.github.com" >> .npmrc
          # You cannot read packages from other private repos with GITHUB_TOKEN
          # You have to use a PAT instead https://github.com/actions/setup-node/issues/49
          echo //npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .npmrc
          echo "always-auth=true" >> .npmrc
      - name: Create .env file
        run: |
          touch .env
          echo "CRYPTO_KEY=6KYQBP847D4ATSFA" >> .env
          echo "MAGIC_IV=uB5xL72szFpJmjVn2reHN8T2WAVg2yXw" >> .env
          echo "MAGIC_SALT=qEN1W5R2MNVJKSWx47mZpIkdqwilhazfnhp74f3vEAF05w5j4X0ghfwtJhNmUYDjN7H64VIw91X4ZZYUep1zic9MRCCIiYKVXLkwupvmEhvQv6nbelTBtXn10WVPEYZL" >> .env
          echo "NEW_CRYPTO_KEY=WZOuIHK0S1vFjjMc" >> .env
          echo "API_URL=https://desktop.internxt.com" >> .env
          echo "NEW_DRIVE_URL=https://api.internxt.com" >> .env
          echo "DRIVE_URL=https://drive.internxt.com" >> .env
          echo "BRIDGE_URL=https://api.internxt.com" >> .env
          echo "APP_SEGMENT_KEY=Mf8sJnBfm3HKNt3RpQ8I5PPwjtoeAZK6" >> .env
          echo "APP_SEGMENT_KEY_TEST=81naPdzAMHb8Sw5HZQb3xSa4yPtE70Op" >> .env
          echo "BUG_REPORTING_URL=https://desktop-bug-reporting.inxt.workers.dev" >> .env
          echo "NOTIFICATIONS_URL=https://notifications.internxt.com" >> .env
          echo "LOCK_REFRESH_INTERVAL=20000" >> .env
          echo "PHOTOS_URL=https://photos.internxt.com/api" >> .env
          echo "DRIVE_API_URL=https://drive.internxt.com/api" >> .env
          echo "RUDDERSTACK_KEY=2G7EO1sNe5RTn8qjzSdBS6XJ8Wg" >> .env
          echo "RUDDERSTACK_DATA_PLANE_URL=https://cdp.internxt.com/v1/batch" >> .env
          echo "APPLE_ID: ${{ secrets.APPLE_ID }}" >> .env
          echo "APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}" >> .env
          
      - name: Create certificate file
        run: |
          touch certificate.pem
          echo "${{ secrets.CERT_DEVELOPER_ID_APPLICATION }}" >> certificate.pem
          chmod 644 ./certificate.pem
      - name: Create certificate file
        run: |      
          expect -c '
          set timeout -1
          spawn sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ./certificate.pem
          expect "Password:"
          send "'${{ secrets.MACOS_PASSWORD }}'\r"
          expect eof
          '
#      - name: Create certificate file
#        run: |
#          touch certificate.pem
#          echo "${{ secrets.CERT_DEVELOPER_ID_APPLICATION }}" >> certificate.pem
#          chmod 644 ./certificate.pem
#          openssl x509 -in ./certificate.pem -noout -text
#          echo "${{ secrets.MACOS_PASSWORD }}" |sudo -S security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ./certificate.pem -p ${{ secrets.MACOS_PASSWORD }}
      - name: Install graphicsmagick
        run: |
          brew install graphicsmagick
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      - name: Install Start Run 
        run: |
          yarn install
      - name: Publish releases
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
        run: |
          yarn run package
          ls release/build
